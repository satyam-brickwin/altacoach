// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String             @id @default(uuid())
  email             String             @unique
  name              String
  password          String             // Hashed
  role              String             @default("USER") // "SUPER_ADMIN", "ADMIN", "USER"
  status            String             @default("ACTIVE") // "ACTIVE", "INACTIVE", "SUSPENDED"
  language          String             @default("English")
  isVerified        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLogin         DateTime?
  resetToken     String?   @unique
  resetTokenExpiry DateTime?
  
  // Relations
  createdBusinesses  Business[]         @relation("BusinessCreator")
  createdDocuments   Document[]         @relation("DocumentCreator")
  businesses         BusinessUser[]
  businessDocuments  BusinessDocument[] @relation("AdminDocuments")
  createdBusinessUsers BusinessUser[]   @relation("BusinessUserCreator")
  userSuggestions    Suggestion[]       @relation("UserSuggestions")
  adminSuggestions   Suggestion[]       @relation("AdminSuggestions")
}

// Business model
model Business {
  id         String             @id @default(uuid())
  name       String
  status     String             @default("PENDING") // "ACTIVE", "PENDING", "SUSPENDED"
  color      String?
  startDate  DateTime           @default(now())
  endDate    DateTime?
  createdAt  DateTime           @default(now())
  modifiedAt DateTime           @updatedAt
  
  // Relations
  createdBy         User               @relation("BusinessCreator", fields: [createdById], references: [id])
  createdById       String
  users             BusinessUser[]
  businessDocuments BusinessDocument[]
  suggestions       Suggestion[] 
}

// Document model (previously Content)
model Document {
  id          String   @id @default(uuid())
  title       String
  description String?
  language    String   @default("English")
  source      String   // "business", "admin"
  fileType    String   // "pdf", "docx", "excel"
  contentType String   // "COURSE", "GUIDE", "EXERCISE", "FAQ"
  url         String
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @updatedAt
  
  // Relations
  createdBy         User               @relation("DocumentCreator", fields: [createdById], references: [id])
  createdById       String
  businessDocuments BusinessDocument[]
}

// BusinessUser model (junction table)
model BusinessUser {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  business    Business  @relation(fields: [businessId], references: [id])
  businessId  String
  createdBy   User      @relation(fields: [createdById], references: [id], name: "BusinessUserCreator")
  createdById String
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt

  @@id([userId, businessId])
}

// BusinessDocument model (junction table)
model BusinessDocument {
  business    Business  @relation(fields: [businessId], references: [id])
  businessId  String
  document    Document  @relation(fields: [documentId], references: [id])
  documentId  String
  admin       User      @relation("AdminDocuments", fields: [adminId], references: [id])
  adminId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([businessId, documentId])

    // Relation to suggestions
  suggestions Suggestion[]
}

// Suggestion model for chat interactions
model Suggestion {
  id           String   @id @default(uuid())   // This acts as the unique ID for the whole chat turn
  chatId       String                          // Used to group messages in a single chat session
  questionId   String                          // Unique ID for the question in the chat
  answerId     String?                         // Unique ID for the answer (nullable initially)
  questionText String                          // Actual user question text
  answerText   String?                         // Suggested answer text
  suggestionText String?  
  userId       String                          // User who asked the question
  businessId   String                          // Business context
  adminId      String                          // Admin associated with the business
  documentId   String?                         // Related document (admin or business)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user     User     @relation("UserSuggestions", fields: [userId], references: [id])
  business Business @relation(fields: [businessId], references: [id])
  admin    User     @relation("AdminSuggestions", fields: [adminId], references: [id])

  // Optional linked document
  businessDocument BusinessDocument? @relation(fields: [businessId, documentId], references: [businessId, documentId])
}


model PromptTable {
  id           String   @id @default(uuid())
  languageCode String   @db.VarChar(20)
  systemPrompt String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

}

model chats {
  id         String        @id @default(uuid())
  name       String?
  user_id    String?
  created_at DateTime      @default(now())

  chat_history chat_history[] @relation("ChatToHistory")
}

model chat_history {
  id         String   @id @default(uuid())
  chat_id    String
  question   String?
  answer     String?
  file_ids   Json?
  created_at DateTime @default(now())

  chats chats @relation("ChatToHistory", fields: [chat_id], references: [id], onDelete: Cascade)
}
